Dictionaries will convert complexity of for loop from O(n) to O(1), while searching the element

stock_prices = []
with open("stock_prices.csv", r) as f:
  for line in f:
    tokens = line.split(',')
    day = tokens[0]
    price = float(tokens[1])
    stock_prices.append([day,price])
    
#print stock prices
# stock_prices
#output:
#[['march 6', 320.67],
#['march 16', 321.67],
#['march 26', 322.67],
#['march 27', 323.67],
#['march 28', 324.67],
#['march 29', 319.67]]

#search element from list

for element in stock_prices:
  if element[0] == 'march 6':
    print(element[1])
    
#Complexity of above searching is O(n) as it depends on (for element in stock_prices:) for loop

# using dictionary it will reduce to O(1)

stock_prices = {}
with open("stock_prices.csv", r) as f:
  for line in f:
    tokens = line.split(',')
    day = tokens[0]
    price = float(tokens[1])
    stock_prices[day]= price
    
#Search element in dictionary
print(stock_prices['march 6'])



#Implement Hash Table

def get_hash(key):
    hash = 0
    for char in key:
        hash += ord(char)
    return hash % 100
    
get_hash('march 6')
Output:9

-----------------------------------------------------
class HashTable:  
    def __init__(self):
        self.MAX = 100
        self.arr = [None for i in range(self.MAX)]
        
    def get_hash(self, key):
        hash = 0
        for char in key:
            hash += ord(char)
        return hash % self.MAX
    
    def __getitem__(self, index):
        h = self.get_hash(index)
        return self.arr[h]
    
    def __setitem__(self, key, val):
        h = self.get_hash(key)
        self.arr[h] = val    
        
    def __delitem__(self, key):
        h = self.get_hash(key)
        self.arr[h] = None    
        
        
        
 t = HashTable()
t["march 6"] = 310
t["march 7"] = 420

t.arr
output:
[None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 310,
 420,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None,
 None]
